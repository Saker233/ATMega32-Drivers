
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000690  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000aec  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000505  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 33 03 	call	0x666	; 0x666 <main>
  64:	0c 94 46 03 	jmp	0x68c	; 0x68c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:
#include"DIO_private.h"
#include"DIO_interface.h"
#include"DIO_config.h"

void DIO_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIRECTION;
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	10 82       	st	Z, r1
	DDRB = PORTB_DIRECTION;
  7a:	e7 e3       	ldi	r30, 0x37	; 55
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	10 82       	st	Z, r1
	DDRC = PORTC_DIRECTION;
  80:	e4 e3       	ldi	r30, 0x34	; 52
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	87 e0       	ldi	r24, 0x07	; 7
  86:	80 83       	st	Z, r24
	DDRD = PORTD_DIRECTION;
  88:	e1 e3       	ldi	r30, 0x31	; 49
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	8e ef       	ldi	r24, 0xFE	; 254
  8e:	80 83       	st	Z, r24

	PORTA = PORTA_INITIAL_VALUE;
  90:	eb e3       	ldi	r30, 0x3B	; 59
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
  96:	e8 e3       	ldi	r30, 0x38	; 56
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
  9c:	e5 e3       	ldi	r30, 0x35	; 53
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
  a2:	e2 e3       	ldi	r30, 0x32	; 50
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin ,u8 Copy_u8Value)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	28 97       	sbiw	r28, 0x08	; 8
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	6b 83       	std	Y+3, r22	; 0x03
  c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=OK;
  c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin < 8)
  ca:	8b 81       	ldd	r24, Y+3	; 0x03
  cc:	88 30       	cpi	r24, 0x08	; 8
  ce:	08 f0       	brcs	.+2      	; 0xd2 <DIO_u8SetPinValue+0x24>
  d0:	f6 c0       	rjmp	.+492    	; 0x2be <DIO_u8SetPinValue+0x210>
	{
		if(Copy_u8Value == DIO_u8LOW)
  d2:	8c 81       	ldd	r24, Y+4	; 0x04
  d4:	88 23       	and	r24, r24
  d6:	09 f0       	breq	.+2      	; 0xda <DIO_u8SetPinValue+0x2c>
  d8:	78 c0       	rjmp	.+240    	; 0x1ca <DIO_u8SetPinValue+0x11c>
		{
			switch(Copy_u8Port)
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	28 2f       	mov	r18, r24
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	38 87       	std	Y+8, r19	; 0x08
  e2:	2f 83       	std	Y+7, r18	; 0x07
  e4:	8f 81       	ldd	r24, Y+7	; 0x07
  e6:	98 85       	ldd	r25, Y+8	; 0x08
  e8:	82 30       	cpi	r24, 0x02	; 2
  ea:	91 05       	cpc	r25, r1
  ec:	61 f1       	breq	.+88     	; 0x146 <DIO_u8SetPinValue+0x98>
  ee:	2f 81       	ldd	r18, Y+7	; 0x07
  f0:	38 85       	ldd	r19, Y+8	; 0x08
  f2:	23 30       	cpi	r18, 0x03	; 3
  f4:	31 05       	cpc	r19, r1
  f6:	34 f4       	brge	.+12     	; 0x104 <DIO_u8SetPinValue+0x56>
  f8:	8f 81       	ldd	r24, Y+7	; 0x07
  fa:	98 85       	ldd	r25, Y+8	; 0x08
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	91 05       	cpc	r25, r1
 100:	69 f0       	breq	.+26     	; 0x11c <DIO_u8SetPinValue+0x6e>
 102:	60 c0       	rjmp	.+192    	; 0x1c4 <DIO_u8SetPinValue+0x116>
 104:	2f 81       	ldd	r18, Y+7	; 0x07
 106:	38 85       	ldd	r19, Y+8	; 0x08
 108:	23 30       	cpi	r18, 0x03	; 3
 10a:	31 05       	cpc	r19, r1
 10c:	89 f1       	breq	.+98     	; 0x170 <DIO_u8SetPinValue+0xc2>
 10e:	8f 81       	ldd	r24, Y+7	; 0x07
 110:	98 85       	ldd	r25, Y+8	; 0x08
 112:	84 30       	cpi	r24, 0x04	; 4
 114:	91 05       	cpc	r25, r1
 116:	09 f4       	brne	.+2      	; 0x11a <DIO_u8SetPinValue+0x6c>
 118:	40 c0       	rjmp	.+128    	; 0x19a <DIO_u8SetPinValue+0xec>
 11a:	54 c0       	rjmp	.+168    	; 0x1c4 <DIO_u8SetPinValue+0x116>
			{
			case DIO_u8PORTA:
				CLR_BIT(PORTA , Copy_u8Pin);
 11c:	ab e3       	ldi	r26, 0x3B	; 59
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	eb e3       	ldi	r30, 0x3B	; 59
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	48 2f       	mov	r20, r24
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	28 2f       	mov	r18, r24
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_u8SetPinValue+0x8c>
 136:	88 0f       	add	r24, r24
 138:	99 1f       	adc	r25, r25
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_u8SetPinValue+0x88>
 13e:	80 95       	com	r24
 140:	84 23       	and	r24, r20
 142:	8c 93       	st	X, r24
 144:	be c0       	rjmp	.+380    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTB:
				CLR_BIT(PORTB , Copy_u8Pin);
 146:	a8 e3       	ldi	r26, 0x38	; 56
 148:	b0 e0       	ldi	r27, 0x00	; 0
 14a:	e8 e3       	ldi	r30, 0x38	; 56
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	48 2f       	mov	r20, r24
 152:	8b 81       	ldd	r24, Y+3	; 0x03
 154:	28 2f       	mov	r18, r24
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 2e       	mov	r0, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_u8SetPinValue+0xb6>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	0a 94       	dec	r0
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_u8SetPinValue+0xb2>
 168:	80 95       	com	r24
 16a:	84 23       	and	r24, r20
 16c:	8c 93       	st	X, r24
 16e:	a9 c0       	rjmp	.+338    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTC:
				CLR_BIT(PORTC , Copy_u8Pin);
 170:	a5 e3       	ldi	r26, 0x35	; 53
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e5 e3       	ldi	r30, 0x35	; 53
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	48 2f       	mov	r20, r24
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	28 2f       	mov	r18, r24
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 2e       	mov	r0, r18
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_u8SetPinValue+0xe0>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_u8SetPinValue+0xdc>
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	8c 93       	st	X, r24
 198:	94 c0       	rjmp	.+296    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTD:
				CLR_BIT(PORTD , Copy_u8Pin);
 19a:	a2 e3       	ldi	r26, 0x32	; 50
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e2 e3       	ldi	r30, 0x32	; 50
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	48 2f       	mov	r20, r24
 1a6:	8b 81       	ldd	r24, Y+3	; 0x03
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_u8SetPinValue+0x10a>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_u8SetPinValue+0x106>
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8c 93       	st	X, r24
 1c2:	7f c0       	rjmp	.+254    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			default:
				Local_u8ErrorState= NOT_OK;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	7c c0       	rjmp	.+248    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			}
		}
		else if(Copy_u8Value == DIO_u8HIGH)
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <DIO_u8SetPinValue+0x124>
 1d0:	73 c0       	rjmp	.+230    	; 0x2b8 <DIO_u8SetPinValue+0x20a>
		{
			switch(Copy_u8Port)
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	28 2f       	mov	r18, r24
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	3e 83       	std	Y+6, r19	; 0x06
 1da:	2d 83       	std	Y+5, r18	; 0x05
 1dc:	8d 81       	ldd	r24, Y+5	; 0x05
 1de:	9e 81       	ldd	r25, Y+6	; 0x06
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	91 05       	cpc	r25, r1
 1e4:	51 f1       	breq	.+84     	; 0x23a <DIO_u8SetPinValue+0x18c>
 1e6:	2d 81       	ldd	r18, Y+5	; 0x05
 1e8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ea:	23 30       	cpi	r18, 0x03	; 3
 1ec:	31 05       	cpc	r19, r1
 1ee:	34 f4       	brge	.+12     	; 0x1fc <DIO_u8SetPinValue+0x14e>
 1f0:	8d 81       	ldd	r24, Y+5	; 0x05
 1f2:	9e 81       	ldd	r25, Y+6	; 0x06
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	91 05       	cpc	r25, r1
 1f8:	61 f0       	breq	.+24     	; 0x212 <DIO_u8SetPinValue+0x164>
 1fa:	5b c0       	rjmp	.+182    	; 0x2b2 <DIO_u8SetPinValue+0x204>
 1fc:	2d 81       	ldd	r18, Y+5	; 0x05
 1fe:	3e 81       	ldd	r19, Y+6	; 0x06
 200:	23 30       	cpi	r18, 0x03	; 3
 202:	31 05       	cpc	r19, r1
 204:	71 f1       	breq	.+92     	; 0x262 <DIO_u8SetPinValue+0x1b4>
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	9e 81       	ldd	r25, Y+6	; 0x06
 20a:	84 30       	cpi	r24, 0x04	; 4
 20c:	91 05       	cpc	r25, r1
 20e:	e9 f1       	breq	.+122    	; 0x28a <DIO_u8SetPinValue+0x1dc>
 210:	50 c0       	rjmp	.+160    	; 0x2b2 <DIO_u8SetPinValue+0x204>
			{
			case DIO_u8PORTA:
				SET_BIT(PORTA , Copy_u8Pin);
 212:	ab e3       	ldi	r26, 0x3B	; 59
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	eb e3       	ldi	r30, 0x3B	; 59
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinValue+0x182>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinValue+0x17e>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	44 c0       	rjmp	.+136    	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTB:
				SET_BIT(PORTB , Copy_u8Pin);
 23a:	a8 e3       	ldi	r26, 0x38	; 56
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e8 e3       	ldi	r30, 0x38	; 56
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPinValue+0x1aa>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPinValue+0x1a6>
 25c:	84 2b       	or	r24, r20
 25e:	8c 93       	st	X, r24
 260:	30 c0       	rjmp	.+96     	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTC:
				SET_BIT(PORTC , Copy_u8Pin);
 262:	a5 e3       	ldi	r26, 0x35	; 53
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e5 e3       	ldi	r30, 0x35	; 53
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	48 2f       	mov	r20, r24
 26e:	8b 81       	ldd	r24, Y+3	; 0x03
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 2e       	mov	r0, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_u8SetPinValue+0x1d2>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_u8SetPinValue+0x1ce>
 284:	84 2b       	or	r24, r20
 286:	8c 93       	st	X, r24
 288:	1c c0       	rjmp	.+56     	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			case DIO_u8PORTD:
				SET_BIT(PORTD , Copy_u8Pin);
 28a:	a2 e3       	ldi	r26, 0x32	; 50
 28c:	b0 e0       	ldi	r27, 0x00	; 0
 28e:	e2 e3       	ldi	r30, 0x32	; 50
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	48 2f       	mov	r20, r24
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	28 2f       	mov	r18, r24
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_u8SetPinValue+0x1fa>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_u8SetPinValue+0x1f6>
 2ac:	84 2b       	or	r24, r20
 2ae:	8c 93       	st	X, r24
 2b0:	08 c0       	rjmp	.+16     	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			default:
				Local_u8ErrorState=NOT_OK;
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <DIO_u8SetPinValue+0x214>
				break;
			}
		}
		else
		{
			Local_u8ErrorState=NOT_OK;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	89 83       	std	Y+1, r24	; 0x01
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_u8SetPinValue+0x214>
		}
	}
	else
	{
		Local_u8ErrorState=NOT_OK;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2c4:	28 96       	adiw	r28, 0x08	; 8
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	cf 91       	pop	r28
 2d2:	df 91       	pop	r29
 2d4:	08 95       	ret

000002d6 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port ,u8 Copy_u8Value)
{
 2d6:	df 93       	push	r29
 2d8:	cf 93       	push	r28
 2da:	00 d0       	rcall	.+0      	; 0x2dc <DIO_u8SetPortValue+0x6>
 2dc:	00 d0       	rcall	.+0      	; 0x2de <DIO_u8SetPortValue+0x8>
 2de:	0f 92       	push	r0
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	8a 83       	std	Y+2, r24	; 0x02
 2e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState=OK;
 2e8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	3d 83       	std	Y+5, r19	; 0x05
 2f2:	2c 83       	std	Y+4, r18	; 0x04
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	9d 81       	ldd	r25, Y+5	; 0x05
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	91 05       	cpc	r25, r1
 2fc:	d9 f0       	breq	.+54     	; 0x334 <DIO_u8SetPortValue+0x5e>
 2fe:	2c 81       	ldd	r18, Y+4	; 0x04
 300:	3d 81       	ldd	r19, Y+5	; 0x05
 302:	23 30       	cpi	r18, 0x03	; 3
 304:	31 05       	cpc	r19, r1
 306:	34 f4       	brge	.+12     	; 0x314 <DIO_u8SetPortValue+0x3e>
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	9d 81       	ldd	r25, Y+5	; 0x05
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	91 05       	cpc	r25, r1
 310:	61 f0       	breq	.+24     	; 0x32a <DIO_u8SetPortValue+0x54>
 312:	1f c0       	rjmp	.+62     	; 0x352 <DIO_u8SetPortValue+0x7c>
 314:	2c 81       	ldd	r18, Y+4	; 0x04
 316:	3d 81       	ldd	r19, Y+5	; 0x05
 318:	23 30       	cpi	r18, 0x03	; 3
 31a:	31 05       	cpc	r19, r1
 31c:	81 f0       	breq	.+32     	; 0x33e <DIO_u8SetPortValue+0x68>
 31e:	8c 81       	ldd	r24, Y+4	; 0x04
 320:	9d 81       	ldd	r25, Y+5	; 0x05
 322:	84 30       	cpi	r24, 0x04	; 4
 324:	91 05       	cpc	r25, r1
 326:	81 f0       	breq	.+32     	; 0x348 <DIO_u8SetPortValue+0x72>
 328:	14 c0       	rjmp	.+40     	; 0x352 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8PORTA:
		PORTA = Copy_u8Value;
 32a:	eb e3       	ldi	r30, 0x3B	; 59
 32c:	f0 e0       	ldi	r31, 0x00	; 0
 32e:	8b 81       	ldd	r24, Y+3	; 0x03
 330:	80 83       	st	Z, r24
 332:	11 c0       	rjmp	.+34     	; 0x356 <DIO_u8SetPortValue+0x80>
		break;
	case DIO_u8PORTB:
		PORTB = Copy_u8Value;
 334:	e8 e3       	ldi	r30, 0x38	; 56
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	80 83       	st	Z, r24
 33c:	0c c0       	rjmp	.+24     	; 0x356 <DIO_u8SetPortValue+0x80>
		break;
	case DIO_u8PORTC:
		PORTC = Copy_u8Value;
 33e:	e5 e3       	ldi	r30, 0x35	; 53
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	80 83       	st	Z, r24
 346:	07 c0       	rjmp	.+14     	; 0x356 <DIO_u8SetPortValue+0x80>
		break;
	case DIO_u8PORTD:
		PORTD = Copy_u8Value;
 348:	e2 e3       	ldi	r30, 0x32	; 50
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	8b 81       	ldd	r24, Y+3	; 0x03
 34e:	80 83       	st	Z, r24
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8SetPortValue+0x80>
		break;
	default:
		Local_ErrorState=NOT_OK;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_ErrorState;
 356:	89 81       	ldd	r24, Y+1	; 0x01
}
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	cf 91       	pop	r28
 364:	df 91       	pop	r29
 366:	08 95       	ret

00000368 <DIO_u8GetPinValue>:
u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8* Copy_pu8Value)
{
 368:	df 93       	push	r29
 36a:	cf 93       	push	r28
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	27 97       	sbiw	r28, 0x07	; 7
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	f8 94       	cli
 376:	de bf       	out	0x3e, r29	; 62
 378:	0f be       	out	0x3f, r0	; 63
 37a:	cd bf       	out	0x3d, r28	; 61
 37c:	8a 83       	std	Y+2, r24	; 0x02
 37e:	6b 83       	std	Y+3, r22	; 0x03
 380:	5d 83       	std	Y+5, r21	; 0x05
 382:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_ErrorState=OK;
 384:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin < 8)
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	88 30       	cpi	r24, 0x08	; 8
 38a:	08 f0       	brcs	.+2      	; 0x38e <DIO_u8GetPinValue+0x26>
 38c:	7c c0       	rjmp	.+248    	; 0x486 <DIO_u8GetPinValue+0x11e>
	{
		if(Copy_pu8Value != ((u8 *)NULL))
 38e:	8c 81       	ldd	r24, Y+4	; 0x04
 390:	9d 81       	ldd	r25, Y+5	; 0x05
 392:	00 97       	sbiw	r24, 0x00	; 0
 394:	09 f4       	brne	.+2      	; 0x398 <DIO_u8GetPinValue+0x30>
 396:	74 c0       	rjmp	.+232    	; 0x480 <DIO_u8GetPinValue+0x118>
		{
			switch(Copy_u8Port)
 398:	8a 81       	ldd	r24, Y+2	; 0x02
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	3f 83       	std	Y+7, r19	; 0x07
 3a0:	2e 83       	std	Y+6, r18	; 0x06
 3a2:	4e 81       	ldd	r20, Y+6	; 0x06
 3a4:	5f 81       	ldd	r21, Y+7	; 0x07
 3a6:	42 30       	cpi	r20, 0x02	; 2
 3a8:	51 05       	cpc	r21, r1
 3aa:	59 f1       	breq	.+86     	; 0x402 <DIO_u8GetPinValue+0x9a>
 3ac:	8e 81       	ldd	r24, Y+6	; 0x06
 3ae:	9f 81       	ldd	r25, Y+7	; 0x07
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	91 05       	cpc	r25, r1
 3b4:	34 f4       	brge	.+12     	; 0x3c2 <DIO_u8GetPinValue+0x5a>
 3b6:	2e 81       	ldd	r18, Y+6	; 0x06
 3b8:	3f 81       	ldd	r19, Y+7	; 0x07
 3ba:	21 30       	cpi	r18, 0x01	; 1
 3bc:	31 05       	cpc	r19, r1
 3be:	69 f0       	breq	.+26     	; 0x3da <DIO_u8GetPinValue+0x72>
 3c0:	5c c0       	rjmp	.+184    	; 0x47a <DIO_u8GetPinValue+0x112>
 3c2:	4e 81       	ldd	r20, Y+6	; 0x06
 3c4:	5f 81       	ldd	r21, Y+7	; 0x07
 3c6:	43 30       	cpi	r20, 0x03	; 3
 3c8:	51 05       	cpc	r21, r1
 3ca:	79 f1       	breq	.+94     	; 0x42a <DIO_u8GetPinValue+0xc2>
 3cc:	8e 81       	ldd	r24, Y+6	; 0x06
 3ce:	9f 81       	ldd	r25, Y+7	; 0x07
 3d0:	84 30       	cpi	r24, 0x04	; 4
 3d2:	91 05       	cpc	r25, r1
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <DIO_u8GetPinValue+0x70>
 3d6:	3d c0       	rjmp	.+122    	; 0x452 <DIO_u8GetPinValue+0xea>
 3d8:	50 c0       	rjmp	.+160    	; 0x47a <DIO_u8GetPinValue+0x112>
			{
				case DIO_u8PORTA:
					*Copy_pu8Value = GET_BIT(PINA,Copy_u8Pin);
 3da:	e9 e3       	ldi	r30, 0x39	; 57
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	a9 01       	movw	r20, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_u8GetPinValue+0x8a>
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_u8GetPinValue+0x86>
 3f6:	ca 01       	movw	r24, r20
 3f8:	81 70       	andi	r24, 0x01	; 1
 3fa:	ec 81       	ldd	r30, Y+4	; 0x04
 3fc:	fd 81       	ldd	r31, Y+5	; 0x05
 3fe:	80 83       	st	Z, r24
 400:	44 c0       	rjmp	.+136    	; 0x48a <DIO_u8GetPinValue+0x122>
					break;
				case DIO_u8PORTB:
					*Copy_pu8Value = GET_BIT(PINB,Copy_u8Pin);
 402:	e6 e3       	ldi	r30, 0x36	; 54
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	28 2f       	mov	r18, r24
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	88 2f       	mov	r24, r24
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	a9 01       	movw	r20, r18
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_u8GetPinValue+0xb2>
 416:	55 95       	asr	r21
 418:	47 95       	ror	r20
 41a:	8a 95       	dec	r24
 41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_u8GetPinValue+0xae>
 41e:	ca 01       	movw	r24, r20
 420:	81 70       	andi	r24, 0x01	; 1
 422:	ec 81       	ldd	r30, Y+4	; 0x04
 424:	fd 81       	ldd	r31, Y+5	; 0x05
 426:	80 83       	st	Z, r24
 428:	30 c0       	rjmp	.+96     	; 0x48a <DIO_u8GetPinValue+0x122>
					break;
				case DIO_u8PORTC:
					*Copy_pu8Value = GET_BIT(PINC,Copy_u8Pin);
 42a:	e3 e3       	ldi	r30, 0x33	; 51
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	8b 81       	ldd	r24, Y+3	; 0x03
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	a9 01       	movw	r20, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_u8GetPinValue+0xda>
 43e:	55 95       	asr	r21
 440:	47 95       	ror	r20
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_u8GetPinValue+0xd6>
 446:	ca 01       	movw	r24, r20
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	ec 81       	ldd	r30, Y+4	; 0x04
 44c:	fd 81       	ldd	r31, Y+5	; 0x05
 44e:	80 83       	st	Z, r24
 450:	1c c0       	rjmp	.+56     	; 0x48a <DIO_u8GetPinValue+0x122>
					break;
				case DIO_u8PORTD:
					*Copy_pu8Value = GET_BIT(PIND,Copy_u8Pin);
 452:	e0 e3       	ldi	r30, 0x30	; 48
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	8b 81       	ldd	r24, Y+3	; 0x03
 45e:	88 2f       	mov	r24, r24
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	a9 01       	movw	r20, r18
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8GetPinValue+0x102>
 466:	55 95       	asr	r21
 468:	47 95       	ror	r20
 46a:	8a 95       	dec	r24
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8GetPinValue+0xfe>
 46e:	ca 01       	movw	r24, r20
 470:	81 70       	andi	r24, 0x01	; 1
 472:	ec 81       	ldd	r30, Y+4	; 0x04
 474:	fd 81       	ldd	r31, Y+5	; 0x05
 476:	80 83       	st	Z, r24
 478:	08 c0       	rjmp	.+16     	; 0x48a <DIO_u8GetPinValue+0x122>
					break;
				default:
					Local_ErrorState=NOT_OK;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	89 83       	std	Y+1, r24	; 0x01
 47e:	05 c0       	rjmp	.+10     	; 0x48a <DIO_u8GetPinValue+0x122>
					break;
			}
		}
		else
		{
			Local_ErrorState=NOT_OK;
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	89 83       	std	Y+1, r24	; 0x01
 484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_u8GetPinValue+0x122>
		}
	}
	else
	{
		Local_ErrorState=NOT_OK;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 48a:	89 81       	ldd	r24, Y+1	; 0x01
}
 48c:	27 96       	adiw	r28, 0x07	; 7
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	f8 94       	cli
 492:	de bf       	out	0x3e, r29	; 62
 494:	0f be       	out	0x3f, r0	; 63
 496:	cd bf       	out	0x3d, r28	; 61
 498:	cf 91       	pop	r28
 49a:	df 91       	pop	r29
 49c:	08 95       	ret

0000049e <DIO_u8GetPortValue>:
u8 DIO_u8GetPortValue(u8 Copy_u8Port , u8* Copy_pu8Value)
{
 49e:	df 93       	push	r29
 4a0:	cf 93       	push	r28
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <DIO_u8GetPortValue+0x6>
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <DIO_u8GetPortValue+0x8>
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <DIO_u8GetPortValue+0xa>
 4a8:	cd b7       	in	r28, 0x3d	; 61
 4aa:	de b7       	in	r29, 0x3e	; 62
 4ac:	8a 83       	std	Y+2, r24	; 0x02
 4ae:	7c 83       	std	Y+4, r23	; 0x04
 4b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_ErrorState=OK;
 4b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != ((u8 *)NULL))
 4b4:	8b 81       	ldd	r24, Y+3	; 0x03
 4b6:	9c 81       	ldd	r25, Y+4	; 0x04
 4b8:	00 97       	sbiw	r24, 0x00	; 0
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_u8GetPortValue+0x20>
 4bc:	3f c0       	rjmp	.+126    	; 0x53c <DIO_u8GetPortValue+0x9e>
	{
		switch(Copy_u8Port)
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	3e 83       	std	Y+6, r19	; 0x06
 4c6:	2d 83       	std	Y+5, r18	; 0x05
 4c8:	8d 81       	ldd	r24, Y+5	; 0x05
 4ca:	9e 81       	ldd	r25, Y+6	; 0x06
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	91 05       	cpc	r25, r1
 4d0:	e9 f0       	breq	.+58     	; 0x50c <DIO_u8GetPortValue+0x6e>
 4d2:	2d 81       	ldd	r18, Y+5	; 0x05
 4d4:	3e 81       	ldd	r19, Y+6	; 0x06
 4d6:	23 30       	cpi	r18, 0x03	; 3
 4d8:	31 05       	cpc	r19, r1
 4da:	34 f4       	brge	.+12     	; 0x4e8 <DIO_u8GetPortValue+0x4a>
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	9e 81       	ldd	r25, Y+6	; 0x06
 4e0:	81 30       	cpi	r24, 0x01	; 1
 4e2:	91 05       	cpc	r25, r1
 4e4:	61 f0       	breq	.+24     	; 0x4fe <DIO_u8GetPortValue+0x60>
 4e6:	27 c0       	rjmp	.+78     	; 0x536 <DIO_u8GetPortValue+0x98>
 4e8:	2d 81       	ldd	r18, Y+5	; 0x05
 4ea:	3e 81       	ldd	r19, Y+6	; 0x06
 4ec:	23 30       	cpi	r18, 0x03	; 3
 4ee:	31 05       	cpc	r19, r1
 4f0:	a1 f0       	breq	.+40     	; 0x51a <DIO_u8GetPortValue+0x7c>
 4f2:	8d 81       	ldd	r24, Y+5	; 0x05
 4f4:	9e 81       	ldd	r25, Y+6	; 0x06
 4f6:	84 30       	cpi	r24, 0x04	; 4
 4f8:	91 05       	cpc	r25, r1
 4fa:	b1 f0       	breq	.+44     	; 0x528 <DIO_u8GetPortValue+0x8a>
 4fc:	1c c0       	rjmp	.+56     	; 0x536 <DIO_u8GetPortValue+0x98>
		{
			case DIO_u8PORTA:
				*Copy_pu8Value = PINA ;
 4fe:	e9 e3       	ldi	r30, 0x39	; 57
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	eb 81       	ldd	r30, Y+3	; 0x03
 506:	fc 81       	ldd	r31, Y+4	; 0x04
 508:	80 83       	st	Z, r24
 50a:	1a c0       	rjmp	.+52     	; 0x540 <DIO_u8GetPortValue+0xa2>
				break;
			case DIO_u8PORTB:
				*Copy_pu8Value = PINB;
 50c:	e6 e3       	ldi	r30, 0x36	; 54
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	eb 81       	ldd	r30, Y+3	; 0x03
 514:	fc 81       	ldd	r31, Y+4	; 0x04
 516:	80 83       	st	Z, r24
 518:	13 c0       	rjmp	.+38     	; 0x540 <DIO_u8GetPortValue+0xa2>
				break;
			case DIO_u8PORTC:
				*Copy_pu8Value = PINC;
 51a:	e3 e3       	ldi	r30, 0x33	; 51
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	eb 81       	ldd	r30, Y+3	; 0x03
 522:	fc 81       	ldd	r31, Y+4	; 0x04
 524:	80 83       	st	Z, r24
 526:	0c c0       	rjmp	.+24     	; 0x540 <DIO_u8GetPortValue+0xa2>
				break;
			case DIO_u8PORTD:
				*Copy_pu8Value = PIND;
 528:	e0 e3       	ldi	r30, 0x30	; 48
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	eb 81       	ldd	r30, Y+3	; 0x03
 530:	fc 81       	ldd	r31, Y+4	; 0x04
 532:	80 83       	st	Z, r24
 534:	05 c0       	rjmp	.+10     	; 0x540 <DIO_u8GetPortValue+0xa2>
				break;
			default:
				Local_ErrorState=NOT_OK;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	89 83       	std	Y+1, r24	; 0x01
 53a:	02 c0       	rjmp	.+4      	; 0x540 <DIO_u8GetPortValue+0xa2>
				break;
		}
	}
	else
	{
		Local_ErrorState=NOT_OK;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 540:	89 81       	ldd	r24, Y+1	; 0x01
}
 542:	26 96       	adiw	r28, 0x06	; 6
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	f8 94       	cli
 548:	de bf       	out	0x3e, r29	; 62
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	cd bf       	out	0x3d, r28	; 61
 54e:	cf 91       	pop	r28
 550:	df 91       	pop	r29
 552:	08 95       	ret

00000554 <GIE_voidEnable>:
#include "GIE_private.h"
#include "GIE_register.h"


void GIE_voidEnable()
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG, 7);
 55c:	af e5       	ldi	r26, 0x5F	; 95
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	ef e5       	ldi	r30, 0x5F	; 95
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	8c 93       	st	X, r24
}
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <GIE_voidDisbale>:
void GIE_voidDisbale()
{
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	cd b7       	in	r28, 0x3d	; 61
 576:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG, 7);
 578:	af e5       	ldi	r26, 0x5F	; 95
 57a:	b0 e0       	ldi	r27, 0x00	; 0
 57c:	ef e5       	ldi	r30, 0x5F	; 95
 57e:	f0 e0       	ldi	r31, 0x00	; 0
 580:	80 81       	ld	r24, Z
 582:	8f 77       	andi	r24, 0x7F	; 127
 584:	8c 93       	st	X, r24
}
 586:	cf 91       	pop	r28
 588:	df 91       	pop	r29
 58a:	08 95       	ret

0000058c <USART_voidInit>:
#include "USART_register.h"
#include "USART_config.h"


void USART_voidInit()
{
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	0f 92       	push	r0
 592:	cd b7       	in	r28, 0x3d	; 61
 594:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0b10000110;
 596:	86 e8       	ldi	r24, 0x86	; 134
 598:	89 83       	std	Y+1, r24	; 0x01
	/* Set Character Size */
	CLR_BIT(UCSRB, 2);
 59a:	aa e2       	ldi	r26, 0x2A	; 42
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	ea e2       	ldi	r30, 0x2A	; 42
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	8b 7f       	andi	r24, 0xFB	; 251
 5a6:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRC, 2);
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	84 60       	ori	r24, 0x04	; 4
 5ac:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRC, 1);
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	89 83       	std	Y+1, r24	; 0x01

	/*	Select UCSRC */
	SET_BIT(Local_u8UCSRC, 7);
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
 5b6:	80 68       	ori	r24, 0x80	; 128
 5b8:	89 83       	std	Y+1, r24	; 0x01

	/*	Select Mode Asynchronous*/
	CLR_BIT(Local_u8UCSRC, 6);
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	8f 7b       	andi	r24, 0xBF	; 191
 5be:	89 83       	std	Y+1, r24	; 0x01

	/*	Selecting Type of Parity*/
	Local_u8UCSRC &= 0b11001111;
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	8f 7c       	andi	r24, 0xCF	; 207
 5c4:	89 83       	std	Y+1, r24	; 0x01
	Local_u8UCSRC |= PARITY;
 5c6:	89 81       	ldd	r24, Y+1	; 0x01
 5c8:	80 62       	ori	r24, 0x20	; 32
 5ca:	89 83       	std	Y+1, r24	; 0x01

	/*	Selecting Stop bit Numbers*/
	CLR_BIT(Local_u8UCSRC, 3);
 5cc:	89 81       	ldd	r24, Y+1	; 0x01
 5ce:	87 7f       	andi	r24, 0xF7	; 247
 5d0:	89 83       	std	Y+1, r24	; 0x01


	UCSRC = Local_u8UCSRC;
 5d2:	e0 e4       	ldi	r30, 0x40	; 64
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	80 83       	st	Z, r24

	/*	BAUD RATE = 9600*/
	UBRRL = 51;
 5da:	e9 e2       	ldi	r30, 0x29	; 41
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	83 e3       	ldi	r24, 0x33	; 51
 5e0:	80 83       	st	Z, r24
	/* Enable Receiver and Transmitter */
	SET_BIT(UCSRB, 4);
 5e2:	aa e2       	ldi	r26, 0x2A	; 42
 5e4:	b0 e0       	ldi	r27, 0x00	; 0
 5e6:	ea e2       	ldi	r30, 0x2A	; 42
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	80 61       	ori	r24, 0x10	; 16
 5ee:	8c 93       	st	X, r24
	SET_BIT(UCSRB, 3);
 5f0:	aa e2       	ldi	r26, 0x2A	; 42
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	ea e2       	ldi	r30, 0x2A	; 42
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	88 60       	ori	r24, 0x08	; 8
 5fc:	8c 93       	st	X, r24
}
 5fe:	0f 90       	pop	r0
 600:	cf 91       	pop	r28
 602:	df 91       	pop	r29
 604:	08 95       	ret

00000606 <USART_voidSendData>:
void USART_voidSendData(u8 Copy_u8Data)
{
 606:	df 93       	push	r29
 608:	cf 93       	push	r28
 60a:	0f 92       	push	r0
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	01 c0       	rjmp	.+2      	; 0x616 <USART_voidSendData+0x10>
	/* CHeck if the data register is empty or not */
	while((GET_BIT(UCSRA, 5)) != 1)
	{
		asm("NOP");
 614:	00 00       	nop
	SET_BIT(UCSRB, 3);
}
void USART_voidSendData(u8 Copy_u8Data)
{
	/* CHeck if the data register is empty or not */
	while((GET_BIT(UCSRA, 5)) != 1)
 616:	eb e2       	ldi	r30, 0x2B	; 43
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	82 95       	swap	r24
 61e:	86 95       	lsr	r24
 620:	87 70       	andi	r24, 0x07	; 7
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	81 70       	andi	r24, 0x01	; 1
 628:	90 70       	andi	r25, 0x00	; 0
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	99 f3       	breq	.-26     	; 0x614 <USART_voidSendData+0xe>
	{
		asm("NOP");
	}
	/* Put the variable being sent in the register */
	UDR = Copy_u8Data;
 62e:	ec e2       	ldi	r30, 0x2C	; 44
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	80 83       	st	Z, r24
}
 636:	0f 90       	pop	r0
 638:	cf 91       	pop	r28
 63a:	df 91       	pop	r29
 63c:	08 95       	ret

0000063e <USART_u8Receive>:
u8 USART_u8Receive(void)
{
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	01 c0       	rjmp	.+2      	; 0x64a <USART_u8Receive+0xc>

	while((GET_BIT(UCSRA, 7)) != 1)
	{
		asm("NOP");
 648:	00 00       	nop
	UDR = Copy_u8Data;
}
u8 USART_u8Receive(void)
{

	while((GET_BIT(UCSRA, 7)) != 1)
 64a:	eb e2       	ldi	r30, 0x2B	; 43
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	88 1f       	adc	r24, r24
 652:	88 27       	eor	r24, r24
 654:	88 1f       	adc	r24, r24
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	b9 f7       	brne	.-18     	; 0x648 <USART_u8Receive+0xa>
	{
		asm("NOP");
	}

	return UDR;
 65a:	ec e2       	ldi	r30, 0x2C	; 44
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
}
 660:	cf 91       	pop	r28
 662:	df 91       	pop	r29
 664:	08 95       	ret

00000666 <main>:




int main()
{
 666:	df 93       	push	r29
 668:	cf 93       	push	r28
 66a:	0f 92       	push	r0
 66c:	cd b7       	in	r28, 0x3d	; 61
 66e:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Data = 0;
 670:	19 82       	std	Y+1, r1	; 0x01
	DIO_voidInit();
 672:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	USART_voidInit();
 676:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_voidInit>
	DIO_u8SetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8HIGH);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	0e 94 57 00 	call	0xae	; 0xae <DIO_u8SetPinValue>
//		{
//			DIO_u8SetPinValue(DIO_u8PORTD, DIO_u8PIN4, DIO_u8LOW);
//		}
		if(GET_BIT(DIO_u8PORTA, 0) == 1)
		{
			USART_voidSendData('O');
 684:	8f e4       	ldi	r24, 0x4F	; 79
 686:	0e 94 03 03 	call	0x606	; 0x606 <USART_voidSendData>
 68a:	fc cf       	rjmp	.-8      	; 0x684 <main+0x1e>

0000068c <_exit>:
 68c:	f8 94       	cli

0000068e <__stop_program>:
 68e:	ff cf       	rjmp	.-2      	; 0x68e <__stop_program>
